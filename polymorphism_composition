# Polymorphism & Composition Homework - Quiz

# Polymorphism

1. What does the ___word___ 'polymorphism' mean?

In object-oriented programming, polymorphism refers to a programming language's ability to process objects differently depending on their data type or class. More specifically, it is the ability to redefine methods for derived classes from a base method either on the abstract class or interface in Java.

2. What does it mean when we apply polymorphism to OO design? Give a simple Java example.

For example, given a base class shape, polymorphism enables the programmer to define different area methods for any number of derived classes, such as circles, rectangles and triangles. No matter what shape an object is, applying the area method to it will return the correct results.

3. What can we use to implement polymorphism in Java?

Interfaces or Inheritance(abstract classes).

4. How many 'forms' can an object take when using polymorphism?

An unlimited amount for Interfaces but a class can only inherit from one superclass.

5. Give an example of when you could use polymorphism.

Creating a class system for a video game where different class of character share attributes but have their own unique attributes.

# Composition

6. What do we mean by 'composition' in reference to object-oriented programming?

Composition means HAS A relationship.The functionality of an object is made up of an aggregate of different classes. In practice, this means holding a pointer to another classes methods that the class can use.

7. When would you use composition? Provide a simple example in Java.

Composition should be used when:

Both classes aren't in the same logical domain.
The subclass isn't a proper subtype of the superclass.
The superclassâ€™s implementation isn't necessary or appropriate for the subclass.
The enhancements made by the subclass aren't primarily additive.

8. What is/are the advantage(s) of using composition?

There is principle, which sounds like "favour object composition over class inheritance". Composition over inheritance in OOP is the principle that classes should achieve polymorphism and code reuse by composition, instead of through inheritance. And there are reasons for existence of this principle.

In most cases "HAS-A" relationship is more semantically correct than "IS-A" relationship between classes.

Composition is more flexible than inheritance. You can change implementation of class at run-time by changing included object, thus changing behaviour of it, but you can't do this with inheritance, you can't change behaviour of base class at run-time.

Inheritance breaks encapsulation. By inheriting from a class you're coupling child class with number of potential implementation details of the parent.
A design based on object composition usually will have less classes.
It is possible to implement "multiple inheritance" in languages which do not support it by composing multiple objects into one.

There is no conflict between methods/properties names, which might occur with inheritance.


9. What happens to the behaviours when the object composed of them is destroyed?
